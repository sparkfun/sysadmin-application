filter { # filter open
	if "PFSense" in [tags] { # pfsense tag match open
		grok { # grok 1 open
			match => {
						"message" => "%{SYSLOGTIMESTAMP:syslog_time_stamp} filterlog: %{GREEDYDATA:syslog_message}"
						}
				} # grok 1 closed

		grok { # grok 2 open
			match => {
						"syslog_message" => "(?<Rule_Start>.*(in|out),\d),%{GREEDYDATA:IP_Version_match}"
						}
				} # grok 2 closed

		csv { # csv "Rule_Start" match open
			source => "Rule_Start"
			columns => [
						"Rule_Number",
		                "Sub_rule_number",
		                "Anchor",
		                "Tracker",
		                "interface",
		                "Reason_for_the_log_entry",
		                "Action_taken",
		                "Direction",
		                "IP_version"
		               ] 
	        } # csv "Rule_Start" match closed

		if [IP_version] == "4" { # ipv4 match open
			if "udp" in [syslog_message] { # udp match open
				csv { # udp csv open
	        		source => "IP_Version_match"
					columns => [
								"TOS",
								"ECN",
								"TTL",
								"ID",
								"Offset",
								"Flags",
								"Protocol_ID",
								"Protocol_text",
								"Length",
								"Source_IP",
								"Destination_IP",
								"Source_Port",
								"Destination_Port",
								"Data_Length"
	                       ]
	            } # uudp csv closed

			} else { # udp match closed ___and___ tcp match open
				csv { # tcp csv open
	        		source => "IP_Version_match"
					columns => [
								"TOS",
								"ECN",
								"TTL",
								"ID",
								"Offset",
								"Flags",
								"Protocol_ID",
								"Protocol_text",
								"Length",
								"Source_IP",
								"Destination_IP",
								"Source_Port",
								"Destination_Port",
								"Data_Length",
								"TCP_Flags",
								"Sequence_Number",
								"ACK",
								"Window",
								"URG",
								"Options"
	                       ]
	            	 } # tcp csv closed
					} # tcp match closed
		} else { # ipv4 match closed ___and___ ipv6 match open 
			csv { # ipv6 csv open
				source => "IP_Version_match"
	            columns => [
	                        "Class",
	                        "Flow_Label",
	                        "Hop_Limit",
	                        "Protocol",
	                        "Protocol_ID",
	                        "Length",
	                        "Source_IP",
	                        "Destination_IP",
	                        "Source_Port",
	                        "Destination_Port",
	                        "Data_Length"
	                       ]
	            	} # ipv6 csv closed
	        	} # ipv6 match closed

		date { # date open
			match => [ "syslog_time_stamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss" ]
        		} # date closed 

		mutate { # remove unused fields open.
	remove_field => [ "syslog_message", "Rule_Start", "IP_Version_match" ]
	 } # remove unused fields closed.

	} # pfsense tag match closed

	geoip { # geoip tag opened
  		source => "Source_IP"
		} #geoip tag closed
} # filter closed
